{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Deployment of the AWS DevSecOps Workshop application.",
  "Parameters": {
    "AmazonLinuxAMI": {
      "Type": "AWS::EC2::Image::Id",
      "Description": "Amazon Linux AMI to deploy with.",
      "Default": "ami-c481fad3"
    },
    "InstanceType": {
      "Type": "String",
      "Description": "EC2 Instance Type to deploy.",
      "Default": "t2.micro"
    },
    "VPCID": {
      "Type": "AWS::EC2::VPC::Id",
      "Description": "Amazon VPC ID to deploy infrastructure into."
    },
    "SubnetId": {
      "Type": "AWS::EC2::Subnet::Id",
      "Description": "Subnet ID to deploy infrastructure into."
    },
    "KeyPairName": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description": "Optional EC2 Keypair to use for the deployed EC2 instance.",
      "Default": ""
    },
    "Environment": {
      "Type": "String",
      "Description": "The environment name of this deployment.",
      "AllowedValues": [
        "acceptance",
        "production"
      ]
    },
    "JenkinsConnectorSG": {
      "Type": "String",
      "Description": "Jenkins Security group for ingress"
    },
    "WorldCIDR": {
      "Type": "String",
      "Description": "CIDR block for users to access web server."
    },
    "UUID": {
      "Type": "String",
      "Description": "Jenkins UUID"
    },
    "AppVersion": {
      "Type": "String",
      "Description": "Version of the application to deploy",
      "Default": "1.0.1"
    }
  },
  "Resources": {
    "ApplicationSecurityGroup": {
      "Properties": {
        "VpcId": {
          "Ref": "VPCID"
        },
        "GroupDescription": "HTTP access for deployment.",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": {
              "Ref": "WorldCIDR"
            }
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": {
              "Ref": "WorldCIDR"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": {
              "Ref": "WorldCIDR"
            }
          }
        ]
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "WaitHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle"
    },
    "EC2Waiter": {
      "DependsOn": "WebServer",
      "Properties": {
        "Handle": {
          "Ref": "WaitHandle"
        },
        "Timeout": "300"
      },
      "Type": "AWS::CloudFormation::WaitCondition"
    },
    "WebServer": {
      "Properties": {
        "ImageId": {
          "Ref": "AmazonLinuxAMI"
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "KeyName": {
          "Ref": "KeyPairName"
        },
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": true,
            "DeleteOnTermination": true,
            "SubnetId": {
              "Ref": "SubnetId"
            },
            "DeviceIndex": 0,
            "GroupSet": [
              {
                "Ref": "ApplicationSecurityGroup"
              },
              {
                "Ref": "JenkinsConnectorSG"
              }
            ]
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                " - ",
                [
                  "AWS DevSecOps Workshop",
                  {
                    "Ref": "Environment"
                  }
                ]
              ]
            }
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "Environment"
            }
          },
          {
            "Key": "UUID",
            "Value": {
              "Ref": "UUID"
            }
          },
          {
            "Key": "InspectorAuditable",
            "Value": "true"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "export wait_handle=\"",
                {
                  "Ref": "WaitHandle"
                },
                "\"\n",
                "#!/bin/bash\n",
                "set -e\n",
                "\n",

                "# Grab security updates\n",
                "yum update -y\n",
                "\n",

                "# Disable root ssh\n",
                "sed -i 's/PermitRootLogin forced-commands-only/PermitRootLogin no/' /etc/ssh/sshd_config \n",
                "service sshd restart \n",

                "# Install AWS Agent (Inspector)\n",
                "mkdir -p /opt/awsagent\n",
                "pushd /opt/awsagent\n",
                "  wget https://d1wk0tztpsntt1.cloudfront.net/linux/latest/install\n",
                "  bash install -u false\n",
                "  /etc/init.d/awsagent start\n",
                "popd\n",
                "\n",

                "# Install Node 6\n",
                "curl --silent --location https://rpm.nodesource.com/setup_6.x | bash -\n",
                "yum install -y gcc-c++ make nodejs \n",
                "\n",

                "# Setup the chat-app \n",
                "mkdir /opt/chat-app \n",
                "pushd /opt/chat-app \n",
                "  wget https://github.com/stelligent/chat-app/releases/download/", { "Ref" : "AppVersion" }, "/chat-app.tar.gz \n",
                "  tar -xvf chat-app.tar.gz \n",
                "  npm install --no-optional \n",
                "  export CHAT_PORT=80\n",
                "  npm run start\n",
                "popd\n",

                "# Create the CloudFormation wait handle JSON\n",
                "cat > /tmp/cfn-success <<CFNSUCCESS\n",
                "{\n",
                "   \"Status\" : \"SUCCESS\",\n",
                "   \"Reason\" : \"Configuration Complete\",\n",
                "   \"UniqueId\" : \"$(uuidgen)\",\n",
                "   \"Data\" : \"Application has completed configuration.\"\n",
                "}\n",
                "CFNSUCCESS\n",
                "\n",

                "# Emit success to CloudFormation\n",
                "curl -T /tmp/cfn-success \"${wait_handle}\"\n",
                "\n"
              ]
            ]
          }
        }
      },
      "Type": "AWS::EC2::Instance"
    }
  },
  "Outputs": {
    "EC2PublicIP": {
      "Value": {
        "Fn::GetAtt": [
          "WebServer",
          "PublicIp"
        ]
      }
    },
    "EC2PrivateIP": {
      "Value": {
        "Fn::GetAtt": [
          "WebServer",
          "PrivateIp"
        ]
      }
    }
  }
}
